/*
 * Lerna
 * a standalone HID-based API for the Razer Hydra
 * based on the findings of Ryan Pavlik (https://github.com/rpavlik/razer-hydra-hid-protocol)
 * and his code from the VRPN software (http://www.cs.unc.edu/Research/vrpn/)
 *
 * Copyright (c) 2013 Jesus Ojeda
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by 
 * this license (the "Software") to use, reproduce, display, distribute, 
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*/

#ifndef _LERNA_H_
#define _LERNA_H_

#ifdef __cplusplus
extern "C" {
#endif

//BUTTON BITMASK
#define BUTTON1 0x04
#define BUTTON2 0x08
#define BUTTON3 0x02
#define BUTTON4 0x10
#define BUT_MID 0x20
#define BUT_JOY 0x40
#define BUMPER  0x01

typedef enum {LEFT=0, RIGHT=1} controller;

typedef struct _controllerdata {
  float pos[3]; //XYZ
  float quat[4]; //WXYZ
  float joy_x, joy_y, trigger;
  unsigned char buttons;
  controller which;
} lernaControllerData;

typedef struct _dual_controllerdata {
  lernaControllerData data[2];
} lernaDualControllerData;

#define LERNA_OK 0x0
#define LERNA_ERROR 0x1
#define LERNA_HID_ERROR 0x3
#define LERNA_THREADING_ERROR 0x5

int lernaInit(void);
int lernaExit(void);

int lernaIsActive(void);

int lernaGetDualControllerData(lernaDualControllerData*);
int lernaGetControllerData(controller, lernaControllerData*);

//unsigned char for how far back in history is the data to be retrieved
//max at 64, otherwise LERNA_ERROR is returned
int lernaGetHistoryDualControllerData(unsigned char, lernaDualControllerData*);
int lernaGetHistoryControllerData(unsigned char, controller, lernaControllerData*);

/*TODO
int lernaEnableFiltering();
int lernaDisableFiltering();
int lernaSetFilterParameter();
int lernaGetFilterParameter();
*/

#ifdef __cplusplus
}
#endif

#endif // _LERNA_H_
